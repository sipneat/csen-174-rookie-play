pipeline {
  agent any

  environment {
    INGRESS_HOST = "rookie-play.jakeesperson.com"
    K8S_NAMESPACE = "rookie-play-main"
  }

  stages {
    stage('Build Docker Images') {
      steps {
        script {
          sh """
            docker build -f pipelines/docker/Dockerfile.frontend -t rookie-play-frontend:latest ./frontend
            docker build -f pipelines/docker/Dockerfile.backend -t rookie-play-backend:latest ./backend
          """
        }
      }
    }

    stage('Static Analysis') {
      steps {
        script {
          sh """
            docker run --rm rookie-play-frontend:latest npx eslint -f checkstyle . > eslint-report.xml || true
          docker run --rm rookie-play-backend:latest pylint --msg-template='{path}:{line}: [{msg_id}, {obj}] {msg} ({symbol})' . > pylint-report.txt || true
          """
          recordIssues tools: [esLint(pattern: 'eslint-report.xml')]
          recordIssues tools: [pyLint(pattern: 'pylint-report.txt')]
        }
      }
    }

    stage ('Deploy to Kubernetes') {
      steps {
        script {
          sh """
            kubectl create namespace ${K8S_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
            sed "s|\\\${INGRESS_HOST}|${INGRESS_HOST}|g" pipelines/k8s/ingress.yaml | kubectl apply -n ${K8S_NAMESPACE} -f -
            kubectl apply -n ${K8S_NAMESPACE} -f pipelines/k8s/frontend-deployment.yaml
            kubectl apply -n ${K8S_NAMESPACE} -f pipelines/k8s/frontend-service.yaml
            kubectl apply -n ${K8S_NAMESPACE} -f pipelines/k8s/backend-deployment.yaml
            kubectl apply -n ${K8S_NAMESPACE} -f pipelines/k8s/backend-service.yaml
          """
        }
      }
    }
  }

  post {
    success {
      echo "Deployed site: http://${INGRESS_HOST}"
      echo "Backend API: http://${INGRESS_HOST}/api"
      script {
        currentBuild.description = '<a href="http://${INGRESS_HOST}" target="_blank">Open Deployed Site</a>'
        currentBuild.description += '<a href="http://${INGRESS_HOST}/api" target="_blank">Open Backend API</a>'
      }
    }
    failure {
      script {
        sh """
          kubectl delete namespace ${K8S_NAMESPACE} || true
        """
      }
    }
  }
}